

HBHOAEncoder {
    classvar n_N3D = #[1.0, 1.7320508075688772, 1.7320508075688772, 1.7320508075688772, 0.6454972243679028, 1.2909944487358056, 2.23606797749979, 1.2909944487358056, 0.6454972243679028, 0.13944333775567927, 0.3415650255319866, 1.0801234497346432, 2.6457513110645907, 1.0801234497346432, 0.3415650255319866, 0.13944333775567927, 0.021128856368212913, 0.05976143046671968, 0.22360679774997896, 0.9486832980505138, 3.0, 0.9486832980505138, 0.22360679774997896, 0.05976143046671968, 0.021128856368212913, 0.0024622368345219954, 0.007786276535852613, 0.033034373632170495, 0.16183471874253744, 0.8563488385776752, 3.3166247903554, 0.8563488385776752, 0.16183471874253744, 0.033034373632170495, 0.007786276535852613, 0.0024622368345219954, 0.00023297975913897983, 0.000807065559927745, 0.003785473021495816, 0.02073388964700497, 0.12440333788202983, 0.7867957924694432, 3.605551275463989, 0.7867957924694432, 0.12440333788202983, 0.02073388964700497, 0.003785473021495816, 0.000807065559927745, 0.00023297975913897983, 1.8550535516040817e-05, 6.940974824220646e-05, 0.0003539216607205733, 0.00212352996432344, 0.014085904245475277, 0.09960238411119947, 0.7319250547113999, 3.872983346207417, 0.7319250547113999, 0.09960238411119947, 0.014085904245475277, 0.00212352996432344, 0.0003539216607205733, 6.940974824220646e-05, 1.8550535516040817e-05, 1.2747636224068018e-06, 5.099054489627207e-06, 2.7928671659168134e-05, 0.0001809984790740411, 0.0013051985941649022, 0.010110024837387998, 0.08213423005076352, 0.6871842709362768, 4.123105625617661, 0.6871842709362768, 0.08213423005076352, 0.010110024837387998, 0.0013051985941649022, 0.0001809984790740411, 2.7928671659168134e-05, 5.099054489627207e-06, 1.2747636224068018e-06, 7.704088945529358e-08, 3.2685681217488767e-07, 1.9058863482942557e-06, 1.3204367954790256e-05, 0.0001022805943721951, 0.0008557408480136178, 0.007557698533204875, 0.06926745121613612, 0.6497862896539309, 4.358898943540674, 0.6497862896539309, 0.06926745121613612, 0.007557698533204875, 0.0008557408480136178, 0.0001022805943721951, 1.3204367954790256e-05, 1.9058863482942557e-06, 3.2685681217488767e-07, 7.704088945529358e-08, 4.154916848495418e-09, 1.8581353028189898e-08, 1.1454315280108378e-07, 8.417168336769031e-07, 6.940974824220647e-06, 6.208196614828809e-05, 0.0005889612439501829, 0.005830418852345344, 0.059458839001056314, 0.6179143806533246, 4.58257569495584, 0.6179143806533246, 0.059458839001056314, 0.005830418852345344, 0.0005889612439501829, 6.208196614828809e-05, 6.940974824220647e-06, 8.417168336769031e-07, 1.1454315280108378e-07, 1.8581353028189898e-08, 4.154916848495418e-09];
    // this goes to 10th order!!!

    /**ar { |order, in, theta, phi, radius |
        var b_sig, cphi, sphi, p_l_m, t_m;

        cphi = cos(phi);
        sphi = sin(phi);

        // Associated Legendre polynomials up to 5th order, no Condon-Shortley phase.
        p_l_m = [
            1,
            cphi,
            sphi,
            cphi,
            3*(cphi**2),
            3*sphi*cphi,
            (3*(sphi**2) - 1)/2,
            3*sphi*cphi,
            3*(cphi**2),
            15*(cphi**3),
            15*sphi*(cphi**2),
            3*(5*(sphi**2) - 1)*cphi/2,
            (5*(sphi**2) - 3)*sphi/2,
            3*(5*(sphi**2) - 1)*cphi/2,
            15*sphi*(cphi**2),
            15*(cphi**3),
            105*(cphi**4),
            105*sphi*(cphi**3),
            15*(7*(sphi**2) - 1)*(cphi**2)/2,
            5*(7*(sphi**2) - 3)*sphi*cphi/2,
            (3*(((sphi**2) - 1)**2) + 24*((sphi**2) - 1)*(sphi**2) + 8*(sphi**4))/8,
            5*(7*(sphi**2) - 3)*sphi*cphi/2,
            15*(7*(sphi**2) - 1)*(cphi**2)/2,
            105*sphi*(cphi**3),
            105*(cphi**4),
            945*(cphi**5),
            945*sphi*(cphi**4),
            105*(9*(sphi**2) - 1)*(cphi**3)/2,
            105*(3*(sphi**2) - 1)*sphi*(cphi**2)/2,
            15*((((sphi**2) - 1)**2) + 12*((sphi**2) - 1)*(sphi**2) + 8*(sphi**4))*cphi/8,
            (15*(((sphi**2) - 1)**2) + 40*((sphi**2) - 1)*(sphi**2) + 8*(sphi**4))*sphi/8,
            15*((((sphi**2) - 1)**2) + 12*((sphi**2) - 1)*(sphi**2) + 8*(sphi**4))*cphi/8,
            105*(3*(sphi**2) - 1)*sphi*(cphi**2)/2,
            105*(9*(sphi**2) - 1)*(cphi**3)/2,
            945*sphi*(cphi**4),
            945*(cphi**5),
        ];

        // trig part (fn or theta) to 5th order
        t_m = [
            1,
            sin(theta),
            1,
            cos(theta),
            sin(2*theta),
            sin(theta),
            1,
            cos(theta),
            cos(2*theta),
            sin(3*theta),
            sin(2*theta),
            sin(theta),
            1,
            cos(theta),
            cos(2*theta),
            cos(3*theta),
            sin(4*theta),
            sin(3*theta),
            sin(2*theta),
            sin(theta),
            1,
            cos(theta),
            cos(2*theta),
            cos(3*theta),
            cos(4*theta),
            sin(5*theta),
            sin(4*theta),
            sin(3*theta),
            sin(2*theta),
            sin(theta),
            1,
            cos(theta),
            cos(2*theta),
            cos(3*theta),
            cos(4*theta),
            cos(5*theta)
        ];

        case {order == 0} {
            b_sig = in*n_N3D[0];
            ^b_sig;
        }

        {order == 1} {
            b_sig = in*n_N3D[..3]*p_l_m[..3]*t_m[..3];
            ^b_sig;
        }

        {order == 2} {
            b_sig = in*n_N3D[..8]*p_l_m[..8]*t_m[..8];
            ^b_sig;
        }

        {order == 3} {
            b_sig = in*n_N3D[..15]*p_l_m[..15]*t_m[..15];
            ^b_sig;
        }

        {order == 4} {
            b_sig = in*n_N3D[..24]*p_l_m[..24]*t_m[..24];
            ^b_sig;
        }

        {order == 5} {
            b_sig = in*n_N3D[..35]*p_l_m[..35]*t_m[..35];
            ^b_sig;
        }

    { "Order not implemented for Homebrew HOA yet.".postln;}
    }*/


    *toBinaural { | order, in, theta, phi, radius |
        var hoa_sig;
        // N.B. assumes HRTFs already loaded.
        hoa_sig = this.ar(order, in, theta, phi, radius);
        ^HOABinaural.ar(
            order: ~order.asInt,
            in: hoa_sig
        );
    }

    *ar { |order, in, theta, radius |
        // HORIZONTAL
        var b_sig, p_l_m, t_m;

        // Associated Legendre polynomials up to 5th order, no Condon-Shortley phase.
        p_l_m = [
            1.0,
            1.0, 0.0, 1.0,
            3.0, 0.0, -0.5, 0.0, 3.0,
            15.0, 0.0, -1.5, 0.0, -1.5, 0.0, 15.0,
            105.0, 0.0, -7.5, 0.0, 0.375, 0.0, -7.5, 0.0, 105.0,
            945.0, 0.0, -52.5, 0.0, 1.875, 0.0, 1.875, 0.0, -52.5, 0.0, 945.0
        ];

        // trig part (fn or theta) to 5th order
        t_m = [
            1,
            sin(theta), 0, cos(theta),
            sin(2*theta), 0, 1, 0, cos(2*theta),
            sin(3*theta), 0, sin(theta), 0, cos(theta), 0, cos(3*theta),
            sin(4*theta), 0, sin(2*theta), 0, 1, 0, cos(2*theta), 0, cos(4*theta),
            sin(5*theta), 0, sin(3*theta), 0, sin(theta), 0, cos(theta), 0, cos(3*theta), 0, cos(5*theta)
        ];
        // Where components of P are zero, components of t_m are set also to zero for efficiency.

        case {order == 0} {
            b_sig = in*n_N3D[0];
            ^b_sig;
        }

        {order == 1} {
            b_sig = in*n_N3D[..3]*p_l_m[..3]*t_m[..3];
            ^b_sig;
        }

        {order == 2} {
            b_sig = in*n_N3D[..8]*p_l_m[..8]*t_m[..8];
            ^b_sig;
        }

        {order == 3} {
            b_sig = in*n_N3D[..15]*p_l_m[..15]*t_m[..15];
            ^b_sig;
        }

        {order == 4} {
            b_sig = in*n_N3D[..24]*p_l_m[..24]*t_m[..24];
            ^b_sig;
        }

        {order == 5} {
            b_sig = in*n_N3D[..35]*p_l_m[..35]*t_m[..35];
            ^b_sig;
        }

    { "Order not implemented for Homebrew HOA yet.".postln;}
    }
}
